// Todo : 오버로딩이 불가능한 연산자의 종류
// C++의 모든 연산자들이 오버로딩의 대상이 되는 것은 아니다.
// 다음과 같이 오버로딩이 불가능한 연산자들도 있다.

// .                맴버 접근 연산자
// .*               맴버 포인터 연산자
// ::               범위 지정 연산자
// ?:               조건 연산자 (3항연산자)
// sizeof           바이트 단위 크기 계산
// typeid           RTTI관련 연산자
// static_cast      형병환 연산자
// dynamic_cast     형변환 연산자
// const_cast       형변환 연산자
// reinterpret_cast 형변환 연산자


// 이들 연산자에 대해서 오버로딩을 제한하는 이유는 C++ 문법 규칙을 보존하기 위해서이다.
// 참고로, 위 연산자들을 오버로딩 해야만 하는 상황이 딱히 존재하지 않는다.
// 그럼 맴버함수 기반으로만 오버로딩이 가능한 연산자를 소개하겠다

// =  대입연산자
// () 함수 호출 연산자
// [] 배열 접근 연산자
// -> 맴버 전근 포인터 연산자

// 이들은 객체를 대상으로 진행해야 의미가 통하는 연산자들이기 때문에, 맴버함수 기반으로 연산자의 오버로딩을 허용한다.

// Todo : 연산자를 오버로딩 하는데 있어서의 주의사항
// 아직은 + 연산자 하나만 오버로딩을 해 보았지만, 다양한 연산자들을 오버로딩 해 보자
