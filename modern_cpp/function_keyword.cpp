// Todo : 함수 키워드 (default , delete , override , final)

// Todo : default 키워드 : 기본적으로 제공되는 함수 사용
// default 키워드는 컴파일러가 제공하는 기본 함수를 사용하겠다는 의미입니다. default 키워드를 사용하면 생성자의 경우 매개변수가 없는 기본 생성자가 호출되고,
// 연산자는 오버로딩되지 않은 기본 연산자가 호출됩니다

// 생성자를 예로 들면, 개발자가 클래스를 만들 때 생성자를 작성하지 않으면 매개변수가 없는 기본 생성자가 자동으로 생성됩니다. 하지만 매개변수를 포함하는 생성자를 작성하면
// 이 생성자만 사용할 수 있습니다. 즉, 생성자를 만들었으므로 매개변수가 없는 생성자는 자동으로 생성되지 않습니다.

// 그런데 자동으로 생성된 기본 생성자를 사용하다가 매개변수를 포함하는 생성자를 추가한다면 기본 생성자를 사용할 수 없게 되므로 기본 생성자가 호출되는 코드에 문제가 발생합니다.
// 또는 컴파일러가 만들어 주는 기본 생성자와 매개변수를 포함하는 생성자를 모두 사용하고 싶을 수 있습니다.

// 이럴때에서 default 키워드를 사용할 수 있습니다. default 키워드는 컴파일러가 자동으로 만들어 주는 매개변수가 없는 기본 생성자를 사용하겠다고 알리는 방법입니다.

class monster_a
{
public:
  int hp;
  // 컴파일러 또는 언어가 제공하는 기본 생성자 사용 -> hp 가 0으로 초기화 됨
  monster_a() = default;
  monster_a(int a) : hp(a){};
};

class monster_b
{
public:
  int hp;
  // 아무런 연산도 하지 않는 기본 생성자 정의 -> hp 가 초기화 되지 않음 == 쓰레기 값이 입력됨
  monster_b(){};
  monster_b(int a) : hp(a){};
};

// Todo : delete 키워드 : 삭제된 함수
// delete 키워드는 더 이상 사용하지 않는 함수에 붙이는 키워드입니다.
// 앞에서 함수의 목적과 사용 방법을 알리는 가장 확실한 방법은 잘못 사용했을 때 컴파일 되지 않도록 하는 것이라고 했습니다.
// 문법을 틀리면 컴파일 오류가 나는 것 처럼 개발 의도와 다르게 사용할 때 컴파일 오류가 발생하도록 하는 것입니다.

// 소스 코드에서 함수가 변경되거나 삭제되면 호출 오류가 발생하빈다. 매개변수나 함수 이름의 변경은 매개변수 구성이 바뀌는 것이므로 그나마 쉽게 이해가 가능하나
// 삭제된 함수는 그 의도를 파악하기 어렵습니다. 삭제된 것이 아니라 함수 이름이 바뀌거나 실수로 누락된 것일 수 있기 때문이죠

// 이때 함수가 더 이상 사용되지 않고 삭제되었음을 알려 주는 키워드가 delete 입니다.

class monster_c
{
public:
  void create_monster() = delete; // 컴파일시 삭제된 함수라고 알려줌
  // void create_monster _() {}; -> delete 키워드를 사용하지 않고 제거 -> 컴파일시 없는 함수라고 알려줌
};

// Todo : override 키워드 - 재정의 함수
// 가상 함수를 상속받았을음 명확히 하는것.
virtual func(int a) override{};

// Todo : final 키워드 - 재정의 금지
// 일반 함수에는 사용할 수 없음
virtual func(...) final {}; // 재정의 불가능
class a final : monster_a{}; // 클래스를 더 이상 상속할 수 없음
struct b final : struct_a{}; // 구조체를 더이상 상속할 수 없음